<%

function convertFormat(str) {
    str = str || '';
    var s = '';

    var occurence = 0;
    for (var i = 0; i < str.length; ++i) {
        if (str[i] === '%')
        {
            s += '{' + occurence + '}';
            i++;
        } else {
            s += str[i]; 
        }
    }

    return s;
}

%>using Asana.Models;
using Asana.Requests;

namespace Asana.Resources 
{
    /// <summary>
<%= comment(resource.comment, 4) %>
    /// </summary>
    public partial class <%= plural(classify(resource.name)) %> : Resource 
    {
        public <%= plural(classify(resource.name)) %>(Client client)
            : base(client) 
        { }<% _.forEach(resource.actions, function(action) {
        if (action.no_code) {
        return;
        }

        var name = snake(action.name);
        var path = action.path;
        var method = action.method.toUpperCase();
        var modelClass = single(camel(resource.name));
        
        var returnClass;
        if (action.collection) {
            returnClass = "CollectionRequest<" + modelClass + ">";            
        } else {
            returnClass = "ItemRequest<" + modelClass + ">";
        }

        var params = paramsForAction(action);
        var pathParamNames = params.pathParams.map(function(param) { return camel(snake(param.name), false); });
        var pathParamNamesAndTypes = params.pathParams.map(function(param) { return typeName(param.type) + " " + camel(snake(param.name), false); });
    %>    

        /// <summary>
<%= comment(action.comment, 8) %>
        /// </summary><% _.forEach(params.pathParams, function(param) { %>
        /// <param name="<%= camel(snake(param.name), false) %>">
<%= comment(param.comment, 8) %> 
        /// </param> <% }); %>
        /// <returns> Request object </returns>        
        public <%= returnClass %> <%= camel(action.name) %>(<%= pathParamNamesAndTypes.join(", ") %>) 
        {<% if (pathParamNames.length > 0) { %>
            string path = string.Format(<%= convertFormat(JSON.stringify(path)) %>, <%= pathParamNames.join(", ") %>);
            return new <%= returnClass %>(this.Client, path, <%= JSON.stringify(method) %>);
        <% } else { %>
            return new <%= returnClass %>(this.Client, <%= JSON.stringify(path) %>, <%= JSON.stringify(method) %>);
        <% } %>}<% }); %>
    }
}